// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id          Int               @id @default(autoincrement())
  name        String
  users       HouseholdUser[]   // Relation to HouseholdUser
  categories  Category[]        // Relation to Category
  goals       Goal[]            // Relation to Goal
}

model HouseholdUser {
  id           Int      @id @default(autoincrement())
  userId       Int
  householdId  Int
  user         User      @relation(fields: [userId], references: [id])
  household    Household @relation(fields: [householdId], references: [id])
  @@unique([userId, householdId]) // Composite unique key
}

model User {
  id             Int             @id @default(autoincrement())
  uid            String          @unique
  name           String
  email          String          @unique
  createdAt      DateTime        @default(now())
  transactions   Transaction[]   // Relation to transactions
  households     HouseholdUser[] // Relation to HouseholdUser
  recurringTransactions   RecurringTransaction[]   // Relation to transactions

}

enum CategoryType {
  debit
  credit
  transfer
}

model Category {
  id           Int             @id @default(autoincrement())
  householdId  Int
  name         String
  createdAt    DateTime        @default(now())
  type         CategoryType?
  household    Household       @relation(fields: [householdId], references: [id])
  transactions Transaction[]
  RecurringTransaction RecurringTransaction[]
}

model Transaction {
  id         Int             @id @default(autoincrement())
  userId     Int
  recurringTransactionId Int?
  amount     Decimal
  type       String
  categoryId Int?
  date       DateTime
  note       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  user       User            @relation(fields: [userId], references: [id])
  category   Category?       @relation(fields: [categoryId], references: [id])
  recurringTransaction RecurringTransaction?  @relation(fields: [recurringTransactionId], references: [id])
}

model RecurringTransaction {
  id             Int       @id @default(autoincrement())
  userId     Int
  amount         Decimal
  type       String
  note       String?
  categoryId     Int
  recurrenceType String    // e.g., "daily", "weekly", "monthly"
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  category       Category  @relation(fields: [categoryId], references: [id])

  Transaction Transaction[]
}

model Goal {
  id           Int             @id @default(autoincrement())
  householdId       Int
  name         String
  targetAmount Decimal
  currentAmount Decimal
  createdAt    DateTime        @default(now())
  household    Household       @relation(fields: [householdId], references: [id])
}
